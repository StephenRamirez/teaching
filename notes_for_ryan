this is our place where i will teach ryan how to make iphone apps

@interface <--- this alllows you to declare a class 

ex:  @interface Test : NSObject 

if you noticed the NSObject this is the super class 
this means the Test class inherits the methods and instance variables from the NSObject class and can use them

next chapter

you are able to store variables in an object and heres how you do it

ex: @interface Test : NSObject {

int x;
int y;

}

this means that a number variable x and y are stored within the Test class

now lets say you want to preform a function from the Test class 
well you would need to define it first so lets make one!

ex: @interface Test : NSObject {

int x;
int y;

}

-(void)print;

in the header file where this interface function is placed you to not say what the funciton does but simply initiliaze that it is there and that the 
class can see it and containes it
//(I'm gonna do comments c++ style, since that's what I'm used to)
//okay, so you initialize the function, but don't tell it what to do? How then does the compiler know what to make the function do? Is it
//within the NSObject class?

Great Question! next chapter!

now we will go over how to tell the program what the initialized function is going to preform 
to do this you need to implement the code for the funtion in the main file instead of the header file where the @interface function is located

@implementation <--- this allows you to implement what the funciton are supposed to do

once again this is located in the main file not the header like the previous phrase

ex: @implementation Test

-(void)print {

NSLog("Hello World!");

}

This snippet of code says you are implementing code into functions of the Test class and then you difine them as so
by re typing the name of the function and then what it does


//Okay, so it looks like we've got a class now with two variables in it, x and y, and a function to print "Hello World!" onto the screen. Great.
//Now how do you put it together? As in, how do you write the code to actually make it compile and print "Hello World!" onto the screen?

another great question! which seems to also go into the next chapter! next chapter!

there are two ways to do this! i will teach both

one is used in the main function

and the other runs using the word self to access the methods without having to create a seperate object
====================================================================================================================

in the main function you need to create an object to use the preset methods applied to your class.

ex: int main() {

Test *myTest = [[Test alloc] init];

[myTest print];

[myTest release];

}

this allocates the methods and variables and initilizes them so they exsist and are usable
REMEBER TO RELEASE THE MEMORY OF THE OBJECT YOU CREATED SO THAT THE IPHONE DOESNT EXPLODE 
although! the new xcode now allows you to not need to release the object for now it does it for you
=======================================================================================================

now lets go over something you will be seeing alot more often in the xcode development tool 

instead of creating an object to use these variables you can use the word self to refer to the last object that recieved a message in this case thats the object you have been adding to
you code would not be in the main fuction but in other functions located in the main file for the view controller(the screen at the current point in code for the iphone)

ex: 

-(void)ViewOnDidLoad {

[self print];

}

so basically in xcode there are a bunch of functions placed in the code already that are meant to do certain things
the one that i put on the screen is performed once the screen loads 
thus once the screen loads the object that was last refered to which was the one we made is accessed and the method print from that object is performed
==============================================================================================================================================================

