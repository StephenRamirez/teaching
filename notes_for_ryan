this is our place where i will teach ryan how to make iphone apps

@interface <--- this alllows you to declare a class 

ex:  @interface Test : NSObject 

if you noticed the NSObject this is the super class 
this means the Test class inherits the methods and instance variables from the NSObject class and can use them

next chapter

you are able to store variables in an object and heres how you do it

ex: @interface Test : NSObject {

int x;
int y;

}

this means that a number variable x and y are stored within the Test class

now lets say you want to preform a function from the Test class 
well you would need to define it first so lets make one!

ex: @interface Test : NSObject {

int x;
int y;

}

-(void)print;

in the header file where this interface function is placed you to not say what the funciton does but simply initiliaze that it is there and that the 
class can see it and containes it
//(I'm gonna do comments c++ style, since that's what I'm used to)
//okay, so you initialize the function, but don't tell it what to do? How then does the compiler know what to make the function do? Is it
//within the NSObject class?

Great Question! next chapter!

now we will go over how to tell the program what the initialized function is going to preform 
to do this you need to implement the code for the funtion in the main file instead of the header file where the @interface function is located

@implementation <--- this allows you to implement what the funciton are supposed to do

once again this is located in the main file not the header like the previous phrase

ex: @implementation Test

-(void)print {

NSLog("Hello World!");

}

This snippet of code says you are implementing code into functions of the Test class and then you difine them as so
by re typing the name of the function and then what it does


//Okay, so it looks like we've got a class now with two variables in it, x and y, and a function to print "Hello World!" onto the screen. Great.
//Now how do you put it together?